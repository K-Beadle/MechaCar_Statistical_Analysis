demo_table <- read.csv(file='demo.csv', check.names=F,stringsAsFactors = F)
setwd("C:/Users/kbead/Data Boot Camp/Modules/Module 15/R_Analysis/01_Demo")
demo_table <- read.csv(file='demo.csv', check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table)
View(demo_table2)
#filter table by price above 10000
filter_table <- demo_table2[demo_table2$price > 10000,]
#filter by price and drive train. This method is cleaner than using brackets
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
#capture the number of rows in demo_table in a variable.
num_rows <- 1:nrow(demo_table)
#sample 3 of those rows, as shown in this code:
sample_rows <- sample(num_rows, 3)
#retrieve requested data within the demo_table:
demo_table[sample_rows,]
?mutate()
library(tidyverse)
?mutate()
View(demo_table)
# 15.2.5
#Add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2021-Year),IsActive=TRUE)
View(demo_table)
#group data by the condition of vehicle and determine avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
View(demo_table2)
View(summarize_demo)
View(demo_table2)
View(demo_table2)
View(summarize_demo)
summarize_demo <- summarize_demo %>% mutate(Maximum_Price=max(price),Num_Vehicles=n())
summarize_demo <- demo_table2 %>% mutate(Maximum_Price=max(price),Num_Vehicles=n())
View(summarize_demo)
View(summarize_demo)
View(filter_table2)
View(summarize_demo)
View(summarize_demo)
View(filter_table2)
#group data by the condition of vehicle and determine avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
View(summarize_demo)
#group data by the condition of vehicle and determine avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'drop')
View(summarize_demo)
#group data by the condition of vehicle and determine avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'rowwise')
View(summarize_demo)
#group data by the condition of vehicle and determine avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
View(summarize_demo)
?gather()
# load the demo2.csv file into R environment and look at top of df
demo_table3 <- read.csv('demo2.csv', check.names = F, stringsAsFactors = F)
View(demo_table3)
#15.2.5 checkpoint
vehicle_data <- read.csv('Vehicle_Data', check.names = F, stringsAsFactors = F)
#15.2.5 checkpoint
vehicle_data <- read.csv('Vehicle_Data.xlsx', check.names = F, stringsAsFactors = F)
View(vehicle_data)
View(vehicle_data)
View(vehicle_data)
View(demo_table3)
View(demo_table3)
# now change the data set to long format using gather()
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(demo_table3)
?spread()
# spread out the long-format data frame back to its original format using spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
# compare original table to this new one and make sure they're the same:
all.equal(demo_table3,wide_table)
View(demo_table3)
View(wide_table)
#the columns are not in the same order, rearrange them so they are in the same order in each df
#NOTE the comma in these brackets indicates that we are selecting all rows
table <- demo_table3[,(colnames(wide_table))]
#now compare the 'table' df we just created to the original demo_table3
all.equal(table,demo_table3)
all.equal(table,wide_table)
#the columns are not in the same order, rearrange them so they are in the same order in each df
#NOTE the comma in these brackets indicates that we are selecting all rows
table <- wide_table[,(colnames(demo_table3))]
#now compare the 'table' df we just created to the original demo_table3
all.equal(table,demo_table3)
?ggplot()
head(mpg)
#create a barplot that represents the distribution of vehicle classes from the mpg data set
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
#compare the number of vehicles form each manufacturer in the dataset using summarize() to summarize data
#and ggplot2's geom_col() to visualize it
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
#change the labels of the plot to describe the data being displayed
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot bar plot with labels
theme(axis.text.x=element_text(angle = 45, hjust=1)) #rotate the x-axis 45 degrees
#15.3.4
#compare differences in avg highway fuel economy of Toyota vehicles as a function of the different cylinder sizes
#create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x+cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(mpg_summary)
#setup line plot
plt + geom_line()
#setup line plot
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#15.3.4
#compare differences in avg highway fuel economy of Toyota vehicles as a function of the different cylinder sizes
#create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x+cyl,y=Mean_Hwy)) #import dataset into ggplot2
#setup line plot
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
?geom_line()
View(mpg_summary)
#15.3.4
#compare differences in avg highway fuel economy of Toyota vehicles as a function of the different cylinder sizes
#create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
#setup line plot
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#scatter plot: visualize relationship between size of each car engine vs their city fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty))
plot + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)", ylab"City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
#scatter plot: visualize relationship between size of each car engine vs their city fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty, color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
#scatter plot: visualize relationship between size of each car engine vs their city fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty, color=class, shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive") #add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive", size="City Fuel_Efficiency (MPG)") #add scatter plot with labels
#scatter plot: visualize relationship between size of each car engine vs their city fuel efficiency
plt <- ggplot(mpg,aes(x=displ,y=cty, color=class, shape=drv, size=cty)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive", size="City Fuel_Efficiency (MPG)") #add scatter plot with labels
View(plt)
View(mpg_summary)
View(filter_table2)
View(long_table)
View(wide_table)
View(vehicle_data)
View(table)
#15.3.5
#generate a boxplot to visualize the highway fuel efficiency of our mpg dataset
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
#create a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(y=hwy, x=manufacturer)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
#create a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(manufacturer, hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "black", colour = "#3366FF", outlier.colour = "red") + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "white", colour = "#3366FF", outlier.colour = "red") + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "green", colour = "#3366FF", outlier.colour = "red") + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "purple", colour = "#3366FF", outlier.colour = "red") + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "gray", colour = "#3366FF", outlier.colour = "red") + theme(axis.text.x = element_text(angle=45, hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
View(mpg_summary)
#15.3.6
#visualize avg highway fuel efficiency across type of vehicle class from 1999-2008
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
View(mpg_summary)
#15.3.6
#visualize avg highway fuel efficiency across type of vehicle class from 1999-2008
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year), fill = Mean_Hwy))
plt + geom_tile() + labs(x= "Vehicle Class", y= "Vehicle Year", fill= "Mean Highway (MPG)") #create heatmap with labels
#difference in avg highway fuel efficiency across each vehicle model from 1999 to 2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x= model, y= factor(year), fill= Mean_Hwy)) # import dataset into ggplot2
#add heatmap with labels and rotate xaxis labels 90 degrees
plt + geom_tile() + labs(x= "Model", y= "Vehicle Year", fill= "Mean Highway (MPG)") + theme(axis.text.x = element_text(angle= 90, hjust= 1, vjust= .5))
